---
## Ansible playbook to perform patching on RHEL/CentOS server

- hosts: all
  become: yes
  become_user: root
#  become_method: su

  tasks:
    # The purpose of this task is to check if application/database is running or stopped
    - name: Verify application/database process are not running
      shell: if ps-eaf | egrep 'apache|http' | grep -v grep > /dev/null; then echo 'process_running'; else echo 'process_not_running'; fi
      ignore_errors: true
      register: app_process_check

    # This task is to decide, play will fail/quit if application/database is running
    - name: decision point to start patching
      fail: msg="{{ inventory_hostname }} have running application/database. Please stop it and then retry."
      when: app_process_check.stdout == "process_running"

    # This task will upgrade/install the rpm's if application/database is stopped
    - name: upgrading packages
      command: yum update -y
      when: app_process_check.stdout == "process_not_running" and ansible_distribution == "CentOS" or ansible_distribution == "Red Hat Enterprise Linux" or ansible_distribution == "RedHat"
      register: yum_update

    # This task is to check if the previous package updated and system needs reboot or not
    - name: Check if reboot is required or not
      shell: KERNEL_NEW=$(rpm -q --last kernel | head -1 | awk '{print $1}' | sed 's/kernel-//'); KERNEL_NOW=$(uname -r); if [[ $KERNEL_NEW != KERNEL_NOW ]]; then echo "reboot_needed"; else echo "reboot_not_needed"; fi
      ignore_errors: true
      register: reboot_required

    # This task is to restart the system
    - name: Restart system
      command: /usr/sbin/shutdown -r +1 "Rebooting system after patching"
      async: 0
      poll: 0
      when: reboot_required.stdout == "reboot_needed"
      register: reboot_started
      ignore_errors: true

    # This task is to wait for 3 minutes for the system restarted to come up
    - name: pause for 180 seconds
      pause:
        minutes: 3

    # This task is to confirm, the system is up and responding to ssh
    - name: Check system response
      local_action:
        module: wait_for
          host={{ inventory_hostname }}
          port=22
          delay=15
          timeout=300
          state=started
      when: reboot_started|changed
